---
- include_vars:
    file: '../vars/secret'

- name: Add users | create users, shell, home dirs
  user:
    name: "{{ item.username }}"
    password: "{{ item.password if item.password is defined else '!' }}"
    update_password: "{{ item.update_password if item.update_password is defined else default_update_password }}"
    shell: "{{ item.shell if item.shell is defined else default_shell }}"
    createhome: yes
    comment: "{{ item.comment if item.comment is defined else '' }}"
    state: present #hard-coded in case user sets state of absent. Choice made to never delete accounts!
#    expires: -1 #unlock account if locked ###Doesn't work like chage..
#    command: chage -E -1 {{ item.username }} #unlock password authentication
  when: item.user_state == 'present' or item.user_state == 'lock'
  with_items: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, user_state: {{ item.user_state }}, password: {{ 'True' if item.password is defined else 'False' }}, update_password: {{ item.update_password if item.update_password is defined else default_update_password }}"

#TODO: Change to user module once -1 bug fixed.
#TODO: Follow issue https://github.com/ansible/ansible/issues/20096
- name: Add users | Unlock password login (set expiry to -1)
  chage:
    user: "{{ item.username }}"
    sp_expire: -1
#  command: chage -E -1 {{ item.username }} #unlock password authentication
  when: item.user_state == 'present'
  with_items: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, user_state: {{ item.user_state }}"

##TODO user module doesn't work properly? expires=0 doesn't change anything. expires=1+ always updates??
##Use chage module instead
#- name: Lock users | Lock password & ssh key authentication
#  user:
#    name: "{{ item.username }}"
#    password: "{{ item.password if item.password is defined else '!' }}"
#    shell: "{{ item.shell if item.shell is defined else default_shell }}"
#    createhome: yes
#    comment: "{{ item.comment if item.comment is defined else '' }}"
#    update_password: "{{ item.update_password if item.update_password is defined else default_update_password }}"
#    expires: 86401
##  command: chage -E 0 {{ item.username }} #Alternative: lock ssh key authentication
#  when: item.user_state == 'lock'
#  with_items: "{{ users }}"
#  loop_control:
#    label: "username: {{item.username}}, user_state: {{ item.user_state }}"

- name: Lock users | Lock password & ssh key authentication
  chage:
    user: "{{ item.username }}"
    sp_expire: 0
#  command: chage -E 0 {{ item.username }} #Alternative lock password & ssh key authentication
  when: item.user_state == 'lock'
  with_items: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, user_state: {{ item.user_state }}"

#Not needed, sp_expire -1 locks password authentication as well.
#- name: Lock users | Lock password login
#  command: passwd -l {{ item.username }} #lock password authentication
#  when: item.user_state == 'lock'
#  with_items: "{{ users }}"

- name: SSH Keys | Add authorized key for ssh key authentication
  authorized_key: 
    user: "{{ item.username }}"
    key: "{{ item.ssh_key }}"
    exclusive: "{{ item.exclusive_ssh_key if item.exclusive_ssh_key is defined else 'no' }}"
    state: present
  when: item.ssh_key is defined
  with_items: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, ssh_key: {{ 'True' if item.ssh_key is defined else 'False' }}, exclusive_ssh_key: {{ item.exclusive_ssh_key if item.exclusive_ssh_key is defined else 'False' }}"

- name: Sudo | add to sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^{{item.username}}'
    line: '{{ item.username }} ALL=(ALL) NOPASSWD:ALL'
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when: "{{ item.use_sudo }} == True"
  with_items: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, use_sudo: {{ item.use_sudo }}"
#environment fixes Redhat issue of hard-coded path to visudo

- name: Sudo | remove from sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: absent
    regexp: '^{{ item.username }}'
    line: '{{ item.username }} ALL=(ALL) NOPASSWD:ALL'
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when: "{{ item.use_sudo }} == False"
  with_items: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, use_sudo: {{ item.use_sudo }}"


